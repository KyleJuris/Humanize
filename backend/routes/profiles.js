const express = require('express');
const { supabase, supabaseAnon } = require('../config/database');
const router = express.Router();

// Middleware to authenticate user
const authenticateUser = async (req, res, next) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    
    if (!token) {
      return res.status(401).json({ error: 'No token provided' });
    }

    const { data: { user }, error } = await supabaseAnon.auth.getUser(token);

    if (error) {
      return res.status(401).json({ error: 'Invalid token' });
    }

    req.user = user;
    next();
  } catch (error) {
    console.error('Authentication error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// Get user profile
router.get('/', authenticateUser, async (req, res) => {
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('user_id', req.user.id)
      .single();

    if (error) {
      if (error.code === 'PGRST116') {
        // Profile doesn't exist, create one
        console.log('üìù Creating new profile for user:', req.user.email);
        console.log('üìù User data:', {
          id: req.user.id,
          email: req.user.email,
          user_metadata: req.user.user_metadata
        });
        
        const profileData = {
          user_id: req.user.id,
          email: req.user.email || 'unknown@example.com', // Ensure email is never null
          user_name: req.user.user_metadata?.full_name || req.user.email?.split('@')[0] || 'User', // Ensure user_name is never null
          avatar_url: req.user.user_metadata?.avatar_url || null,
          plan: 'free',
          subscription_status: 'inactive',
          subscription_type: null,
          subscription_product: null,
          stripe_customer_id: null,
          stripe_subscription_id: null,
          words_used_this_month: 0
        };
        
        console.log('üìù Profile data to insert:', profileData);
        
        const { data: newProfile, error: createError } = await supabase
          .from('profiles')
          .insert(profileData)
          .select()
          .single();

        if (createError) {
          console.error('‚ùå Profile creation error:', createError);
          console.error('‚ùå Error details:', {
            code: createError.code,
            message: createError.message,
            details: createError.details,
            hint: createError.hint
          });
          return res.status(500).json({ 
            error: 'Failed to create profile',
            details: createError.message,
            code: createError.code
          });
        }

        console.log('‚úÖ Profile created successfully');
        return res.json(newProfile);
      } else {
        console.error('Profile fetch error:', error);
        return res.status(500).json({ error: 'Failed to fetch profile' });
      }
    }

    res.json(data);
  } catch (error) {
    console.error('Get profile error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Update user profile
router.put('/', authenticateUser, async (req, res) => {
  try {
    const { user_name, avatar_url, plan, words_used_this_month } = req.body;

    const updateData = {
      user_name,
      avatar_url,
      plan,
      updated_at: new Date().toISOString()
    };

    // Only update words_used_this_month if provided
    if (words_used_this_month !== undefined) {
      updateData.words_used_this_month = words_used_this_month;
    }

    const { data, error } = await supabase
      .from('profiles')
      .update(updateData)
      .eq('user_id', req.user.id)
      .select()
      .single();

    if (error) {
      return res.status(400).json({ error: error.message });
    }

    res.json(data);
  } catch (error) {
    console.error('Update profile error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Create user profile (called after successful auth)
router.post('/', authenticateUser, async (req, res) => {
  try {
    const { user_name, avatar_url, plan } = req.body;

    const { data, error } = await supabase
      .from('profiles')
      .insert({
        user_id: req.user.id,
        email: req.user.email || 'unknown@example.com', // Ensure email is never null
        user_name: user_name || req.user.email?.split('@')[0] || 'User', // Ensure user_name is never null
        avatar_url: avatar_url || null,
        plan: plan || 'free',
        subscription_status: 'inactive',
        subscription_type: null,
        subscription_product: null,
        stripe_customer_id: null,
        stripe_subscription_id: null,
        words_used_this_month: 0
        // created_at and updated_at are auto-generated by the database
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå Profile creation error (POST):', error);
      console.error('‚ùå Error details:', {
        code: error.code,
        message: error.message,
        details: error.details,
        hint: error.hint
      });
      return res.status(400).json({ 
        error: error.message,
        code: error.code,
        details: error.details
      });
    }

    res.status(201).json(data);
  } catch (error) {
    console.error('Create profile error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

module.exports = router;
